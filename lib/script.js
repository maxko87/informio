// Generated by CoffeeScript 1.6.3
(function() {
  var create_youtube_player, onPlayerReady, pull_wiki, pull_youtube, query_text, reset, root, search, setup_textbox, youtube_queries, youtube_url;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  youtube_queries = ["what are ***", "about ***", "learn about ***"];

  youtube_url = "https://gdata.youtube.com/feeds/api/videos?q=***query***&start-index=1&max-results=***num***&v=2&alt=jsonc&callback=?";

  query_text = "";

  $(document).unbind("keydown").bind("keydown", function(event) {
    var d, doPrevent;
    doPrevent = false;
    if (event.keyCode === 8) {
      d = event.srcElement || event.target;
      if ((d.tagName.toUpperCase() === "INPUT" && (d.type.toUpperCase() === "TEXT" || d.type.toUpperCase() === "PASSWORD" || d.type.toUpperCase() === "FILE")) || d.tagName.toUpperCase() === "TEXTAREA") {
        doPrevent = d.readOnly || d.disabled;
      } else {
        doPrevent = true;
      }
    }
    if (doPrevent) {
      return event.preventDefault();
    }
  });

  onPlayerReady = function(event) {
    event.target.playVideo();
    return event.target.mute();
  };

  create_youtube_player = function(num, video_id, height, width) {
    return root.player = new YT.Player("youtube" + num, {
      height: height,
      width: width,
      videoId: video_id,
      playerVars: {
        'autoplay': 1,
        'controls': 0,
        'showinfo': 0
      },
      events: {
        onReady: onPlayerReady
      }
    });
  };

  pull_youtube = function(query, num, start_num) {
    var url;
    query = query.replace(/\ /g, "+");
    url = youtube_url.replace(/\*\*\*num\*\*\*/g, num).replace(/\*\*\*query\*\*\*/g, query);
    console.log(url);
    return $.getJSON(url, function(data) {
      var container, height, i, player, vid_id, width, _i;
      for (i = _i = 0; _i < num; i = _i += 1) {
        vid_id = data.data.items[i].id;
        container = $("#youtube" + (start_num + i + 1));
        console.log("player:");
        console.log(root.player);
        if ((root.player != null)) {
          console.log("PLAYER EXISTS");
          root.player.loadVideoById(vid_id);
          return;
        }
        height = container.height();
        width = container.width();
        console.log(vid_id + " " + height + " " + width);
        player = create_youtube_player(i + 1, vid_id, height, width);
        container.append(player);
        console.log("container:");
        console.log(container);
        $(player.a).parent().mouseover(function() {
          console.log("unmuting");
          return player.unMute();
        });
        $(player.a).parent().mouseout(function() {
          console.log("muting");
          return player.mute();
        });
      }
    });
  };

  pull_wiki = function(query) {
    /*
    TODO: 
      trim parens, pronounciation, etc
      make text proportional to size of div
      "Read More" link
    */

    query.replace(/\ /g, "_");
    console.log("query: " + query);
    return $.getJSON("http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?", {
      page: query,
      prop: "text"
    }, function(data) {
      var intro_html, page;
      page = $(data.parse.text["*"]);
      intro_html = $(page.filter("p")[0]).addClass("wiki").html();
      intro_html = intro_html.replace(/\/wiki\//g, "http://en.wikipedia.org/wiki/");
      return $("#wiki").html(intro_html);
    });
  };

  setup_textbox = function() {
    var blinker, c, match;
    c = $("#cool-textbox");
    match = $("<span class='match visible'>");
    c.append(match);
    blinker = $("<div class='blinker'>");
    c.append(blinker);
    c.focus();
    return $(document).on("keypress", function(e) {
      var el, letter, starting_left, starting_top, to_delete;
      if (e.which === 13) {
        console.log("searching: " + query_text);
        search(query_text);
        reset();
        return;
      }
      if ((e.which === 8) || (e.which === 46)) {
        if (query_text.length > 0) {
          query_text = query_text.substring(0, query_text.length - 1);
          to_delete = $("#cool-textbox span:nth-last-child(3)");
          to_delete.remove();
        }
      }
      $(".blinker").hide();
      letter = String.fromCharCode(e.which);
      query_text = query_text + letter;
      el = $("<span class='letter'>").html(letter);
      starting_left = (Math.random() * 50) - 50;
      starting_top = (Math.random() * 50) - 50;
      el.css("left", starting_left);
      el.css("top", starting_top);
      match.before(el);
      return setTimeout((function() {
        el.css("left", 0);
        el.css("top", 0);
        return el.addClass("visible");
      }), 50);
    });
  };

  reset = function() {
    $(document).data("initialState").replaceAll("#rects");
    $(".blinker").show();
    $("#cool-textbox").children().not(".match, .blinker").remove();
    $(".match").html("");
    $("#wiki").html("");
    return query_text = "";
  };

  search = function(query) {
    pull_wiki(query);
    pull_youtube(query, 1, 0);
    return reset();
  };

  $(document).ready(function() {
    $(document).data("initialState", $("#rects").clone(true));
    return setup_textbox();
  });

}).call(this);
