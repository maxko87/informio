// Generated by CoffeeScript 1.6.3
(function() {
  var IMAGES, YOUTUBES, create_youtube_player, google_image_callback, google_img_url, imageSearch, image_queries, onPlayerReady, pull_google_images, pull_wiki, pull_youtube, query_text, reset, root, search, setup_textbox, supplement_query, youtube_queries, youtube_url;

  google.load("search", "1");

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  youtube_queries = ["*", "*", "what are *", "about *", "learn about *"];

  image_queries = ["*", "* diagram"];

  youtube_url = "https://gdata.youtube.com/feeds/api/videos?q=*query*&start-index=1&max-results=*num*&v=2&alt=jsonc&callback=?";

  google_img_url = "http://www.google.com/search?safe=off&site=imghp&tbm=isch&q=*query*";

  query_text = "";

  root.players = Array(10);

  imageSearch = void 0;

  $(document).unbind("keydown").bind("keydown", function(event) {
    var d, doPrevent;
    doPrevent = false;
    if (event.keyCode === 8 || event.keyCode === 46) {
      d = event.srcElement || event.target;
      if ((d.tagName.toUpperCase() === "INPUT" && (d.type.toUpperCase() === "TEXT" || d.type.toUpperCase() === "PASSWORD" || d.type.toUpperCase() === "FILE")) || d.tagName.toUpperCase() === "TEXTAREA") {
        doPrevent = d.readOnly || d.disabled;
      } else {
        doPrevent = true;
      }
    }
    if (doPrevent) {
      return event.preventDefault();
    }
  });

  onPlayerReady = function(event) {
    event.target.mute();
    return event.target.playVideo();
  };

  create_youtube_player = function(num, video_id, height, width) {
    var player;
    player = new YT.Player("youtube" + num, {
      height: height,
      width: width,
      videoId: video_id,
      playerVars: {
        'autoplay': 1,
        'controls': 0,
        'showinfo': 0
      },
      events: {
        onReady: onPlayerReady
      }
    });
    $(player.a).mouseover(function() {
      return player.unMute();
    });
    $(player.a).mouseout(function() {
      return player.mute();
    });
    return player;
  };

  google_image_callback = function(num, start_num) {
    var i, img_src, index, results, _i, _results;
    if (imageSearch.results && imageSearch.results.length > 0) {
      results = imageSearch.results;
      i = 0;
      _results = [];
      for (i = _i = 0; _i < num; i = _i += 1) {
        img_src = results[i].url;
        index = i + start_num;
        $("#image" + index).attr("src", img_src);
        _results.push($("#image" + index).attr("height", $("#image" + index).parent().height()));
      }
      return _results;
    }
  };

  pull_google_images = function(query, num, start_num) {
    imageSearch = new google.search.ImageSearch();
    imageSearch.setSearchCompleteCallback(this, google_image_callback, [num, start_num]);
    imageSearch.execute(query);
    return google.search.Search.getBranding("branding");
  };

  pull_youtube = function(query, num, start_num) {
    var url;
    query = query.replace(/\ /g, "+");
    url = youtube_url.replace(/\*num\*/g, num).replace(/\*query\*/g, query);
    console.log(url);
    return $.getJSON(url, function(data) {
      var container, div_id, height, i, player, vid_id, width, _i;
      for (i = _i = 0; _i < num; i = _i += 1) {
        vid_id = data.data.items[i].id;
        div_id = "#youtube" + (start_num + i);
        /*
        div = $("<div id=" + div_id + ">")
        container.parent().append(div)
        container.parent().remove('iframe')
        */

        container = $(div_id);
        player = root.players[i];
        if (player) {
          player.loadVideoById(vid_id);
          /*
          try
            root.player.loadVideoById(vid_id)
          catch
            setTimeout ->
              root.player.loadVideoById(vid_id)
            , 500
          */

          return;
        }
        height = container.height();
        width = container.width();
        player = create_youtube_player(i, vid_id, height, width);
        container.append(player);
        root.players[i] = player;
      }
    });
  };

  pull_wiki = function(query) {
    /*
    TODO: 
      "Read More" link
    */

    $("#wiki").hide();
    query.replace(/\ /g, "_");
    console.log("query: " + query);
    return $.getJSON("http://en.wikipedia.org/w/api.php?action=parse&format=json&callback=?&redirects", {
      page: query,
      prop: "text"
    }, function(data) {
      var dis, fontsize, intro_html, intro_html2, link, newfontsize, page, redirects;
      page = $(data.parse.text["*"]);
      dis = "This disambiguation page lists articles associated with the same title.";
      if (page.text().indexOf(dis) > 0) {
        redirects = $("li a[href*=wiki]", page);
        if (redirects.length === 0) {
          return;
        }
        link = $(redirects[0]).text();
        return pull_wiki(link);
      } else {
        intro_html = $(page.filter("p")[0]).addClass("wiki").html();
        intro_html2 = $(page.filter("p")[1]).addClass("wiki").html();
        if (intro_html2.length > intro_html.length) {
          intro_html = intro_html2;
        }
        intro_html = intro_html.replace(/\/wiki\//g, "http://en.wikipedia.org/wiki/");
        $("#wiki").html(intro_html);
        $('.reference').remove();
        $('.Template-Fact').remove();
        while ($("#wiki").outerHeight() > ($("#wiki").parent().height())) {
          fontsize = parseInt($("#wiki").css("font-size"));
          newfontsize = fontsize - 1;
          $("#wiki").css("font-size", newfontsize);
        }
        return $("#wiki").show();
      }
    });
  };

  setup_textbox = function() {
    var blinker, c, match;
    c = $("#cool-textbox");
    match = $("<span class='match visible'>");
    c.append(match);
    blinker = $("<div class='blinker'>");
    c.append(blinker);
    return $(document).on("keypress", function(e) {
      var el, letter, starting_left, starting_top, to_delete;
      if (e.which === 13) {
        search(query_text);
        reset();
        return;
      }
      if ((e.which === 8) || (e.which === 46)) {
        if (query_text.length > 0) {
          query_text = query_text.substring(0, query_text.length - 1);
          to_delete = $("#cool-textbox span:nth-last-child(3)");
          to_delete.remove();
        }
      }
      $(".blinker").hide();
      letter = String.fromCharCode(e.which);
      query_text = query_text + letter;
      el = $("<span class='letter'>").html(letter);
      starting_left = (Math.random() * 50) - 50;
      starting_top = (Math.random() * 50) - 50;
      el.css("left", starting_left);
      el.css("top", starting_top);
      match.before(el);
      return setTimeout((function() {
        el.css("left", 0);
        el.css("top", 0);
        return el.addClass("visible");
      }), 50);
    });
  };

  supplement_query = function(query, supplements) {
    var index, new_query;
    index = parseInt(Math.random(supplements.length));
    new_query = supplements[index].replace(/\*/g, query);
    console.log(new_query);
    return new_query;
  };

  reset = function() {
    $(document).data("initialState").replaceAll("#rects");
    $(".blinker").show();
    $("#cool-textbox").children().not(".match, .blinker").remove();
    $(".match").html("");
    $("#wiki").html("");
    $("#wiki").css("font-size", "25px");
    return query_text = "";
  };

  YOUTUBES = 3;

  IMAGES = 3;

  search = function(query) {
    var i, image_query, youtube_query, _i, _j, _results;
    reset();
    pull_wiki(query);
    for (i = _i = 0; _i < YOUTUBES; i = _i += 1) {
      youtube_query = supplement_query(query, youtube_queries);
      pull_youtube(youtube_query, 1, i);
    }
    _results = [];
    for (i = _j = 0; _j < IMAGES; i = _j += 1) {
      image_query = supplement_query(query, image_queries);
      _results.push(pull_google_images(image_query, 1, i));
    }
    return _results;
  };

  $(document).ready(function() {
    $(document).data("initialState", $("#rects").clone(true));
    setup_textbox();
    return $("#cool-textbox").focus();
  });

}).call(this);
